# Custom workflow to build .NET Framework DLL
# Does a build, and will run tests in future after I write the tests, and will publish to nuget once I write that bit

name: Release to Nuget

# Controls when the action will run. Triggers the workflow on push or pull request
# events but only for the master branch
on:
  release:
    types: [published]

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: windows-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
    # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      
    - name: Checkout DynamicDataDisplayReloaded
      uses: actions/checkout@v2.1.0

    - name: Setup msbuild
      uses: microsoft/setup-msbuild@v1

    - name: Set Version
      run: PropertySheets\SetVersion.cmd ${{ github.event.release.tag_name }} >PropertySheets\BuildAssemblyInfo.cs
      
    - name: verify version in logs
      run: type PropertySheets\BuildAssemblyInfo.cs
      
    - name: Create DynamicDataDisplayReloaded nuget package
      run: msbuild -restore -t:pack DynamicDataDisplay.Pack.sln -p:PackageVersion=${{ github.event.release.tag_name }} -p:Configuration=Release -p:Platform="Any CPU" -m

    - name: Publish Nuget Packages
      run: dotnet nuget push Publish\*.${{ secrets.nuget_api_key }}.nupkg --api-key ${{ secrets.nuget_api_key }} --source https://api.nuget.org/v3/index.json --skip-duplicate
